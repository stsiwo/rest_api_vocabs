"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("reflect-metadata");

var _inversify = require("inversify");

var _UserService = _interopRequireDefault(require("./UseCase/Services/UserService"));

var _WordService = _interopRequireDefault(require("./UseCase/Services/WordService"));

var _DictionaryService = _interopRequireDefault(require("./UseCase/Services/DictionaryService"));

var _UserRepository = _interopRequireDefault(require("./Framework/Infrastructure/Repositories/UserRepository"));

var _WordRepository = _interopRequireDefault(require("./Framework/Infrastructure/Repositories/WordRepository"));

var _DictionaryRepository = _interopRequireDefault(require("./Framework/Infrastructure/Repositories/DictionaryRepository"));

var _CloudinaryAPI = _interopRequireDefault(require("./Framework/APIs/CloudinaryAPI"));

var _type = _interopRequireDefault(require("./type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// initialize container and make binding
// Service
// Repository
// API
// Model
// add injectable annotation to third party class
//  - i don't this does not work ???
//decorate(injectable(), IUserModel );
var container = new _inversify.Container(); // binding here
//  - User

container.bind(_type.default.IUserService).to(_UserService.default);
container.bind(_type.default.IUserRepository).to(_UserRepository.default); //  - Word

container.bind(_type.default.IWordService).to(_WordService.default);
container.bind(_type.default.IWordRepository).to(_WordRepository.default); //  - Dictionary

container.bind(_type.default.IDictionaryService).to(_DictionaryService.default);
container.bind(_type.default.IDictionaryRepository).to(_DictionaryRepository.default); //  - API

container.bind(_type.default.ICloudinaryAPI).to(_CloudinaryAPI.default);
/**
 * DI for Model (from sequelize-typescript) to Repository's constructor
 *  - because model is third party abstract class so I had use "decorate" to explicitly declare the "injectable" but it seems not to work for me, so for now, I directly assign Model dependency to Repository
 *  #REFACTOR
 **/

var _default = container;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pb2NDb250YWluZXIudHMiXSwibmFtZXMiOlsiY29udGFpbmVyIiwiQ29udGFpbmVyIiwiYmluZCIsIlRZUEVTIiwiSVVzZXJTZXJ2aWNlIiwidG8iLCJVc2VyU2VydmljZSIsIklVc2VyUmVwb3NpdG9yeSIsIlVzZXJSZXBvc2l0b3J5IiwiSVdvcmRTZXJ2aWNlIiwiV29yZFNlcnZpY2UiLCJJV29yZFJlcG9zaXRvcnkiLCJXb3JkUmVwb3NpdG9yeSIsIklEaWN0aW9uYXJ5U2VydmljZSIsIkRpY3Rpb25hcnlTZXJ2aWNlIiwiSURpY3Rpb25hcnlSZXBvc2l0b3J5IiwiRGljdGlvbmFyeVJlcG9zaXRvcnkiLCJJQ2xvdWRpbmFyeUFQSSIsIkNsb3VkaW5hcnlBUEkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFrQkE7O0FBQ0E7O0FBQ0E7O0FBUUE7O0FBQ0E7O0FBQ0E7O0FBTUE7O0FBSUE7Ozs7QUExQ0E7QUFtQkE7QUFVQTtBQVFBO0FBR0E7QUFLQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxTQUFTLEdBQUcsSUFBSUMsb0JBQUosRUFBbEIsQyxDQUVBO0FBQ0E7O0FBQ0FELFNBQVMsQ0FBQ0UsSUFBVixDQUE2QkMsY0FBTUMsWUFBbkMsRUFBaURDLEVBQWpELENBQW9EQyxvQkFBcEQ7QUFDQU4sU0FBUyxDQUFDRSxJQUFWLENBQWdDQyxjQUFNSSxlQUF0QyxFQUF1REYsRUFBdkQsQ0FBMERHLHVCQUExRCxFLENBRUE7O0FBQ0FSLFNBQVMsQ0FBQ0UsSUFBVixDQUE2QkMsY0FBTU0sWUFBbkMsRUFBaURKLEVBQWpELENBQW9ESyxvQkFBcEQ7QUFDQVYsU0FBUyxDQUFDRSxJQUFWLENBQWdDQyxjQUFNUSxlQUF0QyxFQUF1RE4sRUFBdkQsQ0FBMERPLHVCQUExRCxFLENBRUE7O0FBQ0FaLFNBQVMsQ0FBQ0UsSUFBVixDQUFtQ0MsY0FBTVUsa0JBQXpDLEVBQTZEUixFQUE3RCxDQUFnRVMsMEJBQWhFO0FBQ0FkLFNBQVMsQ0FBQ0UsSUFBVixDQUFzQ0MsY0FBTVkscUJBQTVDLEVBQW1FVixFQUFuRSxDQUFzRVcsNkJBQXRFLEUsQ0FFQTs7QUFDQWhCLFNBQVMsQ0FBQ0UsSUFBVixDQUErQkMsY0FBTWMsY0FBckMsRUFBcURaLEVBQXJELENBQXdEYSxzQkFBeEQ7QUFFQTs7Ozs7O2VBUWVsQixTIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW5pdGlhbGl6ZSBjb250YWluZXIgYW5kIG1ha2UgYmluZGluZ1xuaW1wb3J0IFwicmVmbGVjdC1tZXRhZGF0YVwiO1xuaW1wb3J0IHsgQ29udGFpbmVyLCBkZWNvcmF0ZSwgaW5qZWN0YWJsZSB9IGZyb20gXCJpbnZlcnNpZnlcIjtcblxuLyoqXG4gKiBiZWZvcmUgdXNpbmcgQGRlY29yYXRvcnM6XG4gKiAgLSB5b3UgbmVlZCB0byBjb25maWcgLmJhYmVscmMgZmlsZSBsaWtlIGJlbG93OlxuICogICAgICBcbiAqICAgXCJwbHVnaW5zXCI6IFtcbiAqICAgICAgIFsgXCJAYmFiZWwvcHJvcG9zYWwtZGVjb3JhdG9yc1wiLCB7IFwibGVnYWN5XCI6IHRydWUgfV0sXG4gKiAgICAgICAuLi5cbiAqICAgICAgIF1cbiAqKi9cblxuLy8gSVNlcnZpY2VcbmltcG9ydCBJVXNlclNlcnZpY2UgZnJvbSAnLi9Vc2VDYXNlL0lTZXJ2aWNlcy9JVXNlclNlcnZpY2UnOyBcbmltcG9ydCBJV29yZFNlcnZpY2UgZnJvbSAnLi9Vc2VDYXNlL0lTZXJ2aWNlcy9JV29yZFNlcnZpY2UnOyBcbmltcG9ydCBJRGljdGlvbmFyeVNlcnZpY2UgZnJvbSAnLi9Vc2VDYXNlL0lTZXJ2aWNlcy9JRGljdGlvbmFyeVNlcnZpY2UnOyBcblxuLy8gU2VydmljZVxuaW1wb3J0IFVzZXJTZXJ2aWNlIGZyb20gJy4vVXNlQ2FzZS9TZXJ2aWNlcy9Vc2VyU2VydmljZSc7XG5pbXBvcnQgV29yZFNlcnZpY2UgZnJvbSAnLi9Vc2VDYXNlL1NlcnZpY2VzL1dvcmRTZXJ2aWNlJztcbmltcG9ydCBEaWN0aW9uYXJ5U2VydmljZSBmcm9tICcuL1VzZUNhc2UvU2VydmljZXMvRGljdGlvbmFyeVNlcnZpY2UnO1xuXG4vLyBJUmVwb3NpdG9yaWVzXG5pbXBvcnQgSVVzZXJSZXBvc2l0b3J5IGZyb20gJy4vVXNlQ2FzZS9JUmVwb3NpdG9yaWVzL0lVc2VyUmVwb3NpdG9yeSc7IFxuaW1wb3J0IElXb3JkUmVwb3NpdG9yeSBmcm9tICcuL1VzZUNhc2UvSVJlcG9zaXRvcmllcy9JV29yZFJlcG9zaXRvcnknOyBcbmltcG9ydCBJRGljdGlvbmFyeVJlcG9zaXRvcnkgZnJvbSAnLi9Vc2VDYXNlL0lSZXBvc2l0b3JpZXMvSURpY3Rpb25hcnlSZXBvc2l0b3J5JzsgXG5cbi8vIFJlcG9zaXRvcnlcbmltcG9ydCBVc2VyUmVwb3NpdG9yeSBmcm9tICcuL0ZyYW1ld29yay9JbmZyYXN0cnVjdHVyZS9SZXBvc2l0b3JpZXMvVXNlclJlcG9zaXRvcnknO1xuaW1wb3J0IFdvcmRSZXBvc2l0b3J5IGZyb20gJy4vRnJhbWV3b3JrL0luZnJhc3RydWN0dXJlL1JlcG9zaXRvcmllcy9Xb3JkUmVwb3NpdG9yeSc7XG5pbXBvcnQgRGljdGlvbmFyeVJlcG9zaXRvcnkgZnJvbSAnLi9GcmFtZXdvcmsvSW5mcmFzdHJ1Y3R1cmUvUmVwb3NpdG9yaWVzL0RpY3Rpb25hcnlSZXBvc2l0b3J5JztcblxuLy8gSUFQSXNcbmltcG9ydCBJQ2xvdWRpbmFyeUFQSSBmcm9tICcuL1VzZUNhc2UvSUFQSXMvSUNsb3VkaW5hcnlBUEknO1xuXG4vLyBBUElcbmltcG9ydCBDbG91ZGluYXJ5QVBJIGZyb20gJy4vRnJhbWV3b3JrL0FQSXMvQ2xvdWRpbmFyeUFQSSc7XG5cbi8vIE1vZGVsXG5cbmltcG9ydCBUWVBFUyBmcm9tICcuL3R5cGUnO1xuXG5cbi8vIGFkZCBpbmplY3RhYmxlIGFubm90YXRpb24gdG8gdGhpcmQgcGFydHkgY2xhc3Ncbi8vICAtIGkgZG9uJ3QgdGhpcyBkb2VzIG5vdCB3b3JrID8/P1xuLy9kZWNvcmF0ZShpbmplY3RhYmxlKCksIElVc2VyTW9kZWwgKTtcblxuY29uc3QgY29udGFpbmVyID0gbmV3IENvbnRhaW5lcigpO1xuXG4vLyBiaW5kaW5nIGhlcmVcbi8vICAtIFVzZXJcbmNvbnRhaW5lci5iaW5kPElVc2VyU2VydmljZT4oVFlQRVMuSVVzZXJTZXJ2aWNlKS50byhVc2VyU2VydmljZSk7XG5jb250YWluZXIuYmluZDxJVXNlclJlcG9zaXRvcnk+KFRZUEVTLklVc2VyUmVwb3NpdG9yeSkudG8oVXNlclJlcG9zaXRvcnkpO1xuXG4vLyAgLSBXb3JkXG5jb250YWluZXIuYmluZDxJV29yZFNlcnZpY2U+KFRZUEVTLklXb3JkU2VydmljZSkudG8oV29yZFNlcnZpY2UpO1xuY29udGFpbmVyLmJpbmQ8SVdvcmRSZXBvc2l0b3J5PihUWVBFUy5JV29yZFJlcG9zaXRvcnkpLnRvKFdvcmRSZXBvc2l0b3J5KTtcblxuLy8gIC0gRGljdGlvbmFyeVxuY29udGFpbmVyLmJpbmQ8SURpY3Rpb25hcnlTZXJ2aWNlPihUWVBFUy5JRGljdGlvbmFyeVNlcnZpY2UpLnRvKERpY3Rpb25hcnlTZXJ2aWNlKTtcbmNvbnRhaW5lci5iaW5kPElEaWN0aW9uYXJ5UmVwb3NpdG9yeT4oVFlQRVMuSURpY3Rpb25hcnlSZXBvc2l0b3J5KS50byhEaWN0aW9uYXJ5UmVwb3NpdG9yeSk7XG5cbi8vICAtIEFQSVxuY29udGFpbmVyLmJpbmQ8SUNsb3VkaW5hcnlBUEk+KFRZUEVTLklDbG91ZGluYXJ5QVBJKS50byhDbG91ZGluYXJ5QVBJKTtcblxuLyoqXG4gKiBESSBmb3IgTW9kZWwgKGZyb20gc2VxdWVsaXplLXR5cGVzY3JpcHQpIHRvIFJlcG9zaXRvcnkncyBjb25zdHJ1Y3RvclxuICogIC0gYmVjYXVzZSBtb2RlbCBpcyB0aGlyZCBwYXJ0eSBhYnN0cmFjdCBjbGFzcyBzbyBJIGhhZCB1c2UgXCJkZWNvcmF0ZVwiIHRvIGV4cGxpY2l0bHkgZGVjbGFyZSB0aGUgXCJpbmplY3RhYmxlXCIgYnV0IGl0IHNlZW1zIG5vdCB0byB3b3JrIGZvciBtZSwgc28gZm9yIG5vdywgSSBkaXJlY3RseSBhc3NpZ24gTW9kZWwgZGVwZW5kZW5jeSB0byBSZXBvc2l0b3J5XG4gKiAgI1JFRkFDVE9SXG4gKiovXG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250YWluZXI7XG4iXX0=
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("reflect-metadata");

var _inversify = require("inversify");

var _UserService = _interopRequireDefault(require("./UseCase/Services/UserService"));

var _WordService = _interopRequireDefault(require("./UseCase/Services/WordService"));

var _DictionaryService = _interopRequireDefault(require("./UseCase/Services/DictionaryService"));

var _UserRepository = _interopRequireDefault(require("./Framework/Infrastructure/Repositories/UserRepository"));

var _WordRepository = _interopRequireDefault(require("./Framework/Infrastructure/Repositories/WordRepository"));

var _DictionaryRepository = _interopRequireDefault(require("./Framework/Infrastructure/Repositories/DictionaryRepository"));

var _CloudinaryAPI = _interopRequireDefault(require("./Framework/APIs/CloudinaryAPI"));

var _type = _interopRequireDefault(require("./type"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// initialize container and make binding
// Service
// Repository
// API
// Model
// add injectable annotation to third party class
//  - i don't this does not work ???
//decorate(injectable(), IUserModel );
var container = new _inversify.Container(); // binding here
//  - User

container.bind(_type.default.IUserService).to(_UserService.default);
container.bind(_type.default.IUserRepository).to(_UserRepository.default); //  - Word

container.bind(_type.default.IWordService).to(_WordService.default);
container.bind(_type.default.IWordRepository).to(_WordRepository.default); //  - Dictionary

container.bind(_type.default.IDictionaryService).to(_DictionaryService.default);
container.bind(_type.default.IDictionaryRepository).to(_DictionaryRepository.default); //  - API

container.bind(_type.default.ICloudinaryAPI).to(_CloudinaryAPI.default);
/**
 * DI for Model (from sequelize-typescript) to Repository's constructor
 *  - because model is third party abstract class so I had use "decorate" to explicitly declare the "injectable" but it seems not to work for me, so for now, I directly assign Model dependency to Repository
 *  #REFACTOR
 **/

var _default = container;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pb2NDb250YWluZXIudHMiXSwibmFtZXMiOlsiY29udGFpbmVyIiwiQ29udGFpbmVyIiwiYmluZCIsIlRZUEVTIiwiSVVzZXJTZXJ2aWNlIiwidG8iLCJVc2VyU2VydmljZSIsIklVc2VyUmVwb3NpdG9yeSIsIlVzZXJSZXBvc2l0b3J5IiwiSVdvcmRTZXJ2aWNlIiwiV29yZFNlcnZpY2UiLCJJV29yZFJlcG9zaXRvcnkiLCJXb3JkUmVwb3NpdG9yeSIsIklEaWN0aW9uYXJ5U2VydmljZSIsIkRpY3Rpb25hcnlTZXJ2aWNlIiwiSURpY3Rpb25hcnlSZXBvc2l0b3J5IiwiRGljdGlvbmFyeVJlcG9zaXRvcnkiLCJJQ2xvdWRpbmFyeUFQSSIsIkNsb3VkaW5hcnlBUEkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDQTs7QUFDQTs7QUFRQTs7QUFDQTs7QUFDQTs7QUFRQTs7QUFDQTs7QUFDQTs7QUFNQTs7QUFJQTs7OztBQWhDQTtBQVNBO0FBVUE7QUFRQTtBQUdBO0FBS0E7QUFDQTtBQUNBO0FBRUEsSUFBTUEsU0FBUyxHQUFHLElBQUlDLG9CQUFKLEVBQWxCLEMsQ0FFQTtBQUNBOztBQUNBRCxTQUFTLENBQUNFLElBQVYsQ0FBNkJDLGNBQU1DLFlBQW5DLEVBQWlEQyxFQUFqRCxDQUFvREMsb0JBQXBEO0FBQ0FOLFNBQVMsQ0FBQ0UsSUFBVixDQUFnQ0MsY0FBTUksZUFBdEMsRUFBdURGLEVBQXZELENBQTBERyx1QkFBMUQsRSxDQUVBOztBQUNBUixTQUFTLENBQUNFLElBQVYsQ0FBNkJDLGNBQU1NLFlBQW5DLEVBQWlESixFQUFqRCxDQUFvREssb0JBQXBEO0FBQ0FWLFNBQVMsQ0FBQ0UsSUFBVixDQUFnQ0MsY0FBTVEsZUFBdEMsRUFBdUROLEVBQXZELENBQTBETyx1QkFBMUQsRSxDQUVBOztBQUNBWixTQUFTLENBQUNFLElBQVYsQ0FBbUNDLGNBQU1VLGtCQUF6QyxFQUE2RFIsRUFBN0QsQ0FBZ0VTLDBCQUFoRTtBQUNBZCxTQUFTLENBQUNFLElBQVYsQ0FBc0NDLGNBQU1ZLHFCQUE1QyxFQUFtRVYsRUFBbkUsQ0FBc0VXLDZCQUF0RSxFLENBRUE7O0FBQ0FoQixTQUFTLENBQUNFLElBQVYsQ0FBK0JDLGNBQU1jLGNBQXJDLEVBQXFEWixFQUFyRCxDQUF3RGEsc0JBQXhEO0FBRUE7Ozs7OztlQVFlbEIsUyIsInNvdXJjZXNDb250ZW50IjpbIi8vIGluaXRpYWxpemUgY29udGFpbmVyIGFuZCBtYWtlIGJpbmRpbmdcbmltcG9ydCBcInJlZmxlY3QtbWV0YWRhdGFcIjtcbmltcG9ydCB7IENvbnRhaW5lciwgZGVjb3JhdGUsIGluamVjdGFibGUgfSBmcm9tIFwiaW52ZXJzaWZ5XCI7XG5cbi8vIElTZXJ2aWNlXG5pbXBvcnQgSVVzZXJTZXJ2aWNlIGZyb20gJy4vVXNlQ2FzZS9JU2VydmljZXMvSVVzZXJTZXJ2aWNlJzsgXG5pbXBvcnQgSVdvcmRTZXJ2aWNlIGZyb20gJy4vVXNlQ2FzZS9JU2VydmljZXMvSVdvcmRTZXJ2aWNlJzsgXG5pbXBvcnQgSURpY3Rpb25hcnlTZXJ2aWNlIGZyb20gJy4vVXNlQ2FzZS9JU2VydmljZXMvSURpY3Rpb25hcnlTZXJ2aWNlJzsgXG5cbi8vIFNlcnZpY2VcbmltcG9ydCBVc2VyU2VydmljZSBmcm9tICcuL1VzZUNhc2UvU2VydmljZXMvVXNlclNlcnZpY2UnO1xuaW1wb3J0IFdvcmRTZXJ2aWNlIGZyb20gJy4vVXNlQ2FzZS9TZXJ2aWNlcy9Xb3JkU2VydmljZSc7XG5pbXBvcnQgRGljdGlvbmFyeVNlcnZpY2UgZnJvbSAnLi9Vc2VDYXNlL1NlcnZpY2VzL0RpY3Rpb25hcnlTZXJ2aWNlJztcblxuLy8gSVJlcG9zaXRvcmllc1xuaW1wb3J0IElVc2VyUmVwb3NpdG9yeSBmcm9tICcuL1VzZUNhc2UvSVJlcG9zaXRvcmllcy9JVXNlclJlcG9zaXRvcnknOyBcbmltcG9ydCBJV29yZFJlcG9zaXRvcnkgZnJvbSAnLi9Vc2VDYXNlL0lSZXBvc2l0b3JpZXMvSVdvcmRSZXBvc2l0b3J5JzsgXG5pbXBvcnQgSURpY3Rpb25hcnlSZXBvc2l0b3J5IGZyb20gJy4vVXNlQ2FzZS9JUmVwb3NpdG9yaWVzL0lEaWN0aW9uYXJ5UmVwb3NpdG9yeSc7IFxuXG4vLyBSZXBvc2l0b3J5XG5pbXBvcnQgVXNlclJlcG9zaXRvcnkgZnJvbSAnLi9GcmFtZXdvcmsvSW5mcmFzdHJ1Y3R1cmUvUmVwb3NpdG9yaWVzL1VzZXJSZXBvc2l0b3J5JztcbmltcG9ydCBXb3JkUmVwb3NpdG9yeSBmcm9tICcuL0ZyYW1ld29yay9JbmZyYXN0cnVjdHVyZS9SZXBvc2l0b3JpZXMvV29yZFJlcG9zaXRvcnknO1xuaW1wb3J0IERpY3Rpb25hcnlSZXBvc2l0b3J5IGZyb20gJy4vRnJhbWV3b3JrL0luZnJhc3RydWN0dXJlL1JlcG9zaXRvcmllcy9EaWN0aW9uYXJ5UmVwb3NpdG9yeSc7XG5cbi8vIElBUElzXG5pbXBvcnQgSUNsb3VkaW5hcnlBUEkgZnJvbSAnLi9Vc2VDYXNlL0lBUElzL0lDbG91ZGluYXJ5QVBJJztcblxuLy8gQVBJXG5pbXBvcnQgQ2xvdWRpbmFyeUFQSSBmcm9tICcuL0ZyYW1ld29yay9BUElzL0Nsb3VkaW5hcnlBUEknO1xuXG4vLyBNb2RlbFxuXG5pbXBvcnQgVFlQRVMgZnJvbSAnLi90eXBlJztcblxuXG4vLyBhZGQgaW5qZWN0YWJsZSBhbm5vdGF0aW9uIHRvIHRoaXJkIHBhcnR5IGNsYXNzXG4vLyAgLSBpIGRvbid0IHRoaXMgZG9lcyBub3Qgd29yayA/Pz9cbi8vZGVjb3JhdGUoaW5qZWN0YWJsZSgpLCBJVXNlck1vZGVsICk7XG5cbmNvbnN0IGNvbnRhaW5lciA9IG5ldyBDb250YWluZXIoKTtcblxuLy8gYmluZGluZyBoZXJlXG4vLyAgLSBVc2VyXG5jb250YWluZXIuYmluZDxJVXNlclNlcnZpY2U+KFRZUEVTLklVc2VyU2VydmljZSkudG8oVXNlclNlcnZpY2UpO1xuY29udGFpbmVyLmJpbmQ8SVVzZXJSZXBvc2l0b3J5PihUWVBFUy5JVXNlclJlcG9zaXRvcnkpLnRvKFVzZXJSZXBvc2l0b3J5KTtcblxuLy8gIC0gV29yZFxuY29udGFpbmVyLmJpbmQ8SVdvcmRTZXJ2aWNlPihUWVBFUy5JV29yZFNlcnZpY2UpLnRvKFdvcmRTZXJ2aWNlKTtcbmNvbnRhaW5lci5iaW5kPElXb3JkUmVwb3NpdG9yeT4oVFlQRVMuSVdvcmRSZXBvc2l0b3J5KS50byhXb3JkUmVwb3NpdG9yeSk7XG5cbi8vICAtIERpY3Rpb25hcnlcbmNvbnRhaW5lci5iaW5kPElEaWN0aW9uYXJ5U2VydmljZT4oVFlQRVMuSURpY3Rpb25hcnlTZXJ2aWNlKS50byhEaWN0aW9uYXJ5U2VydmljZSk7XG5jb250YWluZXIuYmluZDxJRGljdGlvbmFyeVJlcG9zaXRvcnk+KFRZUEVTLklEaWN0aW9uYXJ5UmVwb3NpdG9yeSkudG8oRGljdGlvbmFyeVJlcG9zaXRvcnkpO1xuXG4vLyAgLSBBUElcbmNvbnRhaW5lci5iaW5kPElDbG91ZGluYXJ5QVBJPihUWVBFUy5JQ2xvdWRpbmFyeUFQSSkudG8oQ2xvdWRpbmFyeUFQSSk7XG5cbi8qKlxuICogREkgZm9yIE1vZGVsIChmcm9tIHNlcXVlbGl6ZS10eXBlc2NyaXB0KSB0byBSZXBvc2l0b3J5J3MgY29uc3RydWN0b3JcbiAqICAtIGJlY2F1c2UgbW9kZWwgaXMgdGhpcmQgcGFydHkgYWJzdHJhY3QgY2xhc3Mgc28gSSBoYWQgdXNlIFwiZGVjb3JhdGVcIiB0byBleHBsaWNpdGx5IGRlY2xhcmUgdGhlIFwiaW5qZWN0YWJsZVwiIGJ1dCBpdCBzZWVtcyBub3QgdG8gd29yayBmb3IgbWUsIHNvIGZvciBub3csIEkgZGlyZWN0bHkgYXNzaWduIE1vZGVsIGRlcGVuZGVuY3kgdG8gUmVwb3NpdG9yeVxuICogICNSRUZBQ1RPUlxuICoqL1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGFpbmVyO1xuIl19